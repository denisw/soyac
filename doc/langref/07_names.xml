<chapter id="names">
  <title>Names</title>

  <para>
  Names refer to declared entities (<xref linkend="declarations"/>). There are
  two types of names: simple names,  which consist of a single identifier, and
  qualified names, which consist of multiple identifiers separated by "." tokens.
  </para>

  <productionset>
    <production>
      <lhs>name</lhs>
      <rhs>
      identifier, {".", identifier}
      </rhs>
    </production>
  </productionset>

  <remark>
  Need to move module names here.
  </remark>

  <sect1 id="declarations">
    <title>Declarations</title>

    <para>
    Declarations introduce entities. Declared entities are variables
    (<xref linkend="variables"/>), functions (), enumerations (), structs (),
    classes (), constructors (), and aliases ().
    </para>
  </sect1>

  <sect1 id="scopes">
    <title>Scopes</title>

    <para>
    The scope of a declaration is the region in the program text in which the
    declared entity can be referred to using a simple name. The declared entity
    is said to be in scope in that region.
    </para>

    <itemizedlist>
      <listitem><para>
      The scope of a declaration with no enclosing block or declaration is the
      entire module in which the declaration occurs.
      </para></listitem>
      <listitem><para>
      The scope of a declaration within a struct or class declaration is that
      struct's or class' body.
      </para></listitem>
      <listitem><para>
      The scope of a declaration within a block is that block.
      </para></listitem>
      <listitem><para>
      The scope of a parameter declared in a function declaration () is that
      function's body.
      </para></listitem>
      <listitem><para>
      The scope of a variable declared in a <code>switch-block</code> of a
      switch statement () is that <code>switch-block</code>.
      </para></listitem>
      <listitem><para>
      The scope of a variable declared in a <code>for-initializer</code> of a
      for statement () is the for-initializer, the for-condition, the 
      for-iterator, and the contained statement of that for statement.
      </para></listitem>
    </itemizedlist>

    <para>
    It is a compile-time error to use an entity at a point in the program which
    precedes the entity's declaration. An entity is said to be used in the
    following cases:
    </para>

    <itemizedlist>
      <listitem><para>
      The entity is referred to by a simple name expression
      (<xref linkend="simple_name_expressions"/>) or a member access
      expression (<xref linkend="member_access_expressions"/>).
      </para></listitem>
      <listitem><para>
      The entity is referred to as part of a type name, excluding occurrences
      of the entity's derived pointer type. (For instance, it is a compile-time
      error to declare a variable of type T or <type>T[]</type> before T is
      declared, but it is not to declare a variable of type <type>T*</type> or
      <type>T*[]</type> in the same case.)
      </para></listitem>
      <listitem><para>
      An expression of the entity's derived pointer type is used as the operand
      of a dereference expression ().
      </para></listitem>
    </itemizedlist>

    <remark>
    It needs to be described that references from function declarations are
    not counted as uses.
    </remark>

    <para>
    It is a compile-time for two declared entities with the same name to have
    the same scope.
    </para>

    <sect2 id="declaration_hiding">
      <title>Declaration Hiding</title>

      <para>
      A declaration may be hidden by another declaration in parts of its scope,
      in which the declared entity cannot be accessed by its simple name.
      </para>

      <itemizedlist>
        <listitem><para>
        A declaration D of an entity named N hides the declarations of all
        entities named N which are in scope in the block or declaration body
        where D is declared.
        </para></listitem>
        <listitem><para>
        A declaration D of a non-method member named N hides the declarations
        of all base type members named N throughout the declaration body in
        which D is declared.
        </para></listitem>
        <listitem><para>
        A declaration D of a method named N hides the declarations of all
        non-method base type members named N and all base class methods with
        the same signature throughout the declaration body in which D is
        declared.
        </para></listitem>
      </itemizedlist>

      <para>
      In the context of declaration hiding, a type T is said to be a base type
      of a type B if a value of type B can be implicitly converted to type T
      using an widening reference conversion
      (<xref linkend="widening_reference_conversions"/>).
      </para>

      <para>
      A hidden base class member declaration causes a warning to be reported
      unless the hiding declaration includes the <code>new</code> modifier.
      </para>
    </sect2>
  </sect1>

  <sect1 id="members">
    <title>Members</title>

    <para>
    Modules and types have members.
    </para>

    <itemizedlist>
      <listitem><para>
      The members of a module are the entities declared directly in the body
      of the module.
      </para></listitem>
      <listitem><para>
      The members of an enumeration are the constants declared in the
      enumeration.
      </para></listitem>
      <listitem><para>
      The members of a struct are the entities declared directly in the
      declaration body of the struct.
      </para></listitem>
      <listitem><para>
      The members of a class are the entities declared directly in the
      declaration body of the class and the non-constructor members of its
      base classes and interfaces.
      </para></listitem>
      <listitem><para>
      The members of an interface are the entities declared directly in the
      declaration bodies of the interface and its base interfaces.
      </para></listitem>
      <listitem><para>
      The members of each of the simple types are specified in
      <xref linkend="simple_types"/>.
      </para></listitem>
      <listitem><para>
      The members of the an array type are specified in ().
      </para></listitem>
      <listitem><para>
      The members of the a pointer type are specified in ().
      </para></listitem>
      <listitem><para>
      Function types have no members.
      </para></listitem>      
    </itemizedlist>
  </sect1>

  <sect1 id="name_resolution">
    <title>Name Resolution</title>

    <para>
    Name resolution is the process of determining the meaning of a name. A
    name N is resolved as follows:
    </para>

    <itemizedlist>
      <listitem>
        <para>
        If N is a simple name:
        </para>
        <itemizedlist>
          <listitem><para>
          If a non-function entity named N is in scope at the point where
          N occurs, the meaning of N is that entity.
          </para></listitem>
          <listitem><para>
          If a group of one or more functions named N are in scope at the point
          where N occurs, the meaning of N is that group of functions.
          </para></listitem>
          <listitem><para>
          Otherwise, if N is the name of a module in the same package as the
          module in which N occurs, the meaning of N is that module. If no such
          module exists and N is the name of a module in the public package, the
          meaning of N is that module.
          </para></listitem>
          <listitem><para>
          Otherwise, N has no meaning, and a compile-time error occurs.
          </para></listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
        If N is a qualified name, the meaning of it's left-most identifier is
        determined as if it were a simple name. Then, from left to right, the
        meaning of the remaining identifiers is determined. For each identifier
        I immediately preceded by an identifier P, the following rules are
        applied:
        </para>
        <itemizedlist>
          <listitem><para>
          If P refers to a module and I is the name of a non-function member of
          that module, the meaning of I is that member.
          </para></listitem>
          <listitem><para>
          If P refers to a module and I is the name of a group of functions in
          that module, the meaning of I is that group of functions.
          </para></listitem>
          <listitem><para>
          If P refers to a type and a member lookup (<xref linkend="member_lookup"/>)
          of I in that type has a result, the meaning of I is the result of
          that member lookup.
          </para></listitem>
          <listitem><para>
          Otherwise, the qualified name is invalid, and a compile-time error
          occurs.
          </para></listitem>
        </itemizedlist>
        <para>
        The meaning of the qualified name is the meaning of the name's
        right-most identifier.
        </para>
      </listitem>
    </itemizedlist>

    <sect2 id="member_lookup">
      <title>Member Lookup</title>

      <para>
      A member lookup is the process of determining the meaning of a name in
      the context of a type.
      </para>

      <para>
      A member lookup of a name N in a type T consists of the following steps:
      </para>

      <orderedlist>
        <listitem>
          <para>
          All accessible members () of T named N are gathered, excluding:
          </para>
          <itemizedlist>
            <listitem><para>
            Members hidden inside the declaration body of T
            (<xref linkend="declaration_hiding"/>).
            </para></listitem>
            <listitem><para>
            Members declared with the <code>override</code> modifier.
            </para></listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
          From the set of members gathered in the first step, the result of
          the member lookup is determined:
          </para>
          <itemizedlist>
            <listitem><para>
            If the set of members consists of a single non-method member, that
            member is the result of the member lookup.
            </para></listitem>
            <listitem><para>
            If the set of members consists of a group of one or more methods,
            that group of methods is the result of the member lookup.
            </para></listitem>
            <listitem><para>
            Otherwise, the member lookup has no result.
            </para></listitem>
          </itemizedlist>
        </listitem>
      </orderedlist>
    </sect2>
  </sect1>
</chapter>
